¿Qué resuelve?
- Código más corto al ser reutilizado
- Si algo falla NO todo se rompe
- Programación más simple

Es un paradigma que permite resolver un problema pensando en cada parte del mismo como objetos con unas caracteristicas y unos comportamientos, sepados por : 
	REPRESENTACIÓN SEGUN "UML"
	- Clases: son los moldes donde definimos la estructura que tendrán los objetos que se cree a partir de estos. Se representan como un recuadro que encierra los demás conceptos y se relacionan así:
		--> indica que A depende de B
		--|> herencia de HIJO a PADRE
		--<> de 1 a muchos * ( un arbol tiene muvhas hojas )
		--<>(negro) A existe sí solo sí B existe 
		-CONTIENE:
			{
			- Método constructor: Son parametros minimos que necesita el objeto para ser creado, se declaran en una funcion con el mismo nombre de la clase y si se extiende de otra clase, será "super"
			}
	- Propiedades: Son las caracteristicas que describen al objeto y se representan, segun su visibilidad con
		+ PUBLIC
		- PRIVATE
		# PROTECTED
		~ DEFAULT
	- Métodos: son las acciones que puede realizar un objeto y se representan, segun su visibilidad con
		+ PUBLIC
		- PRIVATE
		# PROTECTED
		~ DEFAULT
	- Objetos: "Lo primero que debemos hacer en un problema es identificar los objetos conceptuales"  ya que cada uno tiene atributos y metodos, y siempre son sustantivos por ende.

y conceptops como:
	- Encapsulamiento: Define la visibilidad, alcance o "Scope" que tendrá un item para que los ddemas puedan o no acceder a él
	- Abstracción: Se refiere a como construyo uns clase, la manera en que me traigo " del mundo real " las caracteristicas y acciones de un objeto para definir su "molde"
	- Herencia: Es el principio de la reutilzación, nos permite crear nuevas clases a partir de otras cuando detectemos elementos repetidos y nos genera un padre (Super clase) y unos hijos (Los que heredan)
	- Polimorfismo: Significa muchasmfromas y hace referencia a que un metodo con el mismo nombre puede tener diferentes comportamientos @Override 
	- Modularidad: Se refiere a dividir un sistema en partes mas pequeñas que funcionen independientemente por lo que se puedan tratar y modificar por aparte 

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

BUENAS PRACTICAS
- Cada clase debe ir en un archivo por separado para mantener la modularidad
	