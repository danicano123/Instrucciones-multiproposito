primero confirgura tus credenciales con " git config --global user.name " para tu nickname y cambia name por email para configurar tu email

En la carpeta donde está mi proycto, desde consola hago " git init " que comienza un repositorio ( base de datos donde se guardará loscambios de cualquier archivo dentro de la carpeta )

de una vez mi visual estudio tiene un apartado a lado izquierdo donde me muestra como el registro del control de versiones pero a nivel consola, puedo revisar todos los cambios solo con " git status "

nada va a ser añadido al seguimiento de las versiones hasta que no lo agreguemos y lo hacemos con " git add nombreArchivo " o para agregar todos los archivos que haya en la carpeta " git add ."

hasta este punto ha sido enviado, si hay algo que no debió ser agregado aún, simplemente lo sacamos con " git rm --cached nombreArchivo " con el " --cached " le decimos, saquelo de la lista para hacer commit pero no borre ese archivo de la carpeta, o si lo quiere borrar solo cambie esa instruccion por un " -f " NO RECOMENDADO

para enviar los cambios al repositorio local, solo usamos " git commit -m "textoDescriptivoDeLoQueEnvio" 

para ver el historial de cambios usamos " git log nombreArchivoARevisar " o " git log --stat " si quiero ver que cambios se hicieron en qué archivos

para ver tanto historial como las diferencias entre el cambio actual y el anterior " git show nombreArchivo " 

si queremos comparar 2 versiones, primero desplagamos el historial completo con " git log nombreArchivo " y luego tomamos el id de las 2 versiones a comparar para pegarlas así " git diff id1 id2 " primero ponemos la mas vieja y luego la mas reciente por buena practica

" git reset idARegresar --soft " me devuelve a la version que yo desee pero mantiene los cambios actuales en staging o tracking como si los tuviera en git add SI ESTOY EN LA VERSION 10 Y PASO A LA 1 SE BORRAN TODAS HASTA LA 1 IGUAL EN QUE EN EL HARD 

"git reset id --hard " me devuelve a la version elegida agresivamente, osea que no deja nada en tracking y de una queda esa version como el head

"git reset HEAD " me saca todo lo de memoria RAM osea lo que esta en stadding osea lo que puse con git add

" git checkout " me permite saltar entre versiones sin borrar nada y hacer revisiones sin necesariamente hacer cambios, permitiendo volvera la version head sin problemas. Si quiero volver a alguna version anterior digo " git checkout idVersion nombreArchivo " el nombreArchivo es si no quiero traer todo ese commit sino solo una parte de él y si quiero volver al original solo llamo al de master o tambien por el id si quiero. NO BORRA NADA AL VOLVER ATRAS

" git push " me va a mandar el head para el repositorio remoto

" git fetch " me trae la ultima actualizacion del repositorio remoto al local NO A MI DIRECTORIO

" git clone " se trae una copia del master remoto a tu local

" git pull origin nombreRama" hace fetch y merge al mismo tiempo

" git merge otraRama " fusiona la ultima version del repositorio local con mi directorio de trabajo. Se debe hacer estando dentro de la rama principal y se pone el nombre de la otra rama. Si hay conflicto puedo usar " git merge --abort " para cancelar el merge o puedo arreglar el conflicto

" git branch " me muestra todas las ramas .
	[
	crea una nueva si le agrego un nombre " git branch nombreRama "
	puedo ver el historial por ramas con git show-branch --all
	Tambien se puede borrar la rama con " git branch -D nombreRama " 
	"git branch -r : me permite ver la ramas del remoto
	"git branch -a" ver todas la ramas remotas y locales
	]

" git remote add origin linkDelRepositorio " me establece la conexion con mi repositorio remoto y puedo tener mas de un remoto, solo le cambio el nombre de origin e invico la nueva direccion en mi caso SSH, esto se hace sobretodo cuando estoy colaborando con un repositorio donde no soy colaborador y me tengo que actualizar al a version reciente de este repo

" git push origin master " me manda TODO lo local DE LA RAMA ACTUAL al remoto incluyendo el historial de commits PERO si sale un error de que el remoto tiene trabajo que tu no tienes en local lo que debes hacer es un " pull " Para revisar que si esté bien vinvulado " git remote -v "

" git pull origin nombreRama " me trae lo que hay en el head de el remoto pero si me sale una advertencia de que no hay commits en comun ya que son historias distintas debo hacer " git pull origin master --allow-unrelated-histories " y ahí si nos deja

" git rebase nombrerRama " me fusiona 2 ramas como si la primera nunca hubiera existido. Se hace desde la rama que quiero eliminar hacia la rama principal o que quedará con toda la data. Primero se hace rebase a la rama secundaria y luego a la principal

Puedo crear TAGS primero copio el hash del commit  " git tag -a v0.1 -m "comentario" hashDelCommit " y puedo ver mis tags con " git tag " o verlo completo con " git show-ref --tags " y puedes mandar dichos tang al repo remoto con " git push origin --tags " Y tambien lo puedo borrar con " git tag -d nombreTag " y luego " git push origin :refs/tags/nombreTag "

GIT STAGH : quiero volver a un commit anterior o rama y tengo cambios a los que aun no les quiero hacer commit, puedo guardarlas con " stash " en un lugar temporal y me devuelve al ultimo commit
	[
	git stash list: me muestra todos los WIP work in progres en que rama están y cual es su indice
	git stash pop: me devuelve ese ultimo cambio en memoria
	git stash branch nombreNuevaRama: me tira el pop del stash a una rama por si quiero que esos cambios que hice se trabajen en otra rama
	git stash drop: me borra el pop
	git stash save: me permite guardarlo con un mensaje
	git stash pop stash@{numero}: puedo usar un stash en especifico
	git stash clean: me borra todos los stach
	]

GIT CLEAN: borra los archivos no stageados o trackeados pero no borra carpetas ni lo que esté en "gitignore" sino archivos y no funciona por si solo, se necesita :
	[
	git clean --dry-run: simula lo que se va a borrar sin borrarlo
	git clean -f : ahi si borra todo
	]

GIT CHERRY-PICK idCommit : me hace un " merge " entre cualquier commit que yo elija y la rama donde esté parado

GIT REFLOG: me muestra TODO lo que se ha hecho sin excepciones incluyendo los comandos que se ejecutaron, aquí me muestra unos indices de cabecera "HEAD"  que puedo usar para volver en el tiempo con " git reset --hard hashDelHead "

GIT COMMIT --AMEND : me suma los cambios actuales en stage al commit anterios por si me quedó faltando algo

GIT GREP palabraABuscar: mi busca en TODOS los archivos de mi rama actual las palabras o frases que coincidan con la busqueda
	[
	Con" git grep -n color" nos saldrá un output el cual nos dirá en qué línea está lo que estamos buscando.
	Con "git grep -c color" nos saldrá un output el cual nos dirá cuántas veces se repite esa palabra y en qué archivo.
	Si queremos buscar cuántas veces utilizamos un atributo de HTML lo hacemos con "git grep -c "<p>"".
	Con " git log -S "palabra a buscar" : me hace el filtro pero en los logs
	]

GITK ME ABRE UNA SUPER INTERFAZ 


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


.GITIGNORE: es un archivo que me va a indicar qué elementos NO deben ser incluidos en el envío y la sintaxis es como si hicieramos una consulta en wildcards
	[
	# aquí van los comentarios
	*.jpg : me ignora todo lo que termine por ".jpg"
	home/daniel/desktop : NO me envies lo que está en mi escritorio (solo un ejemplo)
	!home/daniel/desktop/importante : PERO de lo que está en mi escritorio, mandame esa carpeta que dice importante (con el "!" si permito algo en particular)
	]


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

README.MD: Es una buena practica que describe mi proyecto siendo un archivo de tipo .md


